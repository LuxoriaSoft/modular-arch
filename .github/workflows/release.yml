on: push

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, x86]

    env:
      Solution_Name: Luxoria.App.sln

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up .NET SDK
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'  # Specify the .NET SDK version you are using
      
      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2
      
      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}
        working-directory: ./G-EIP-700-STG-7-1-eip-lucas.hoch-main/Luxoria.App
      
      # Decode the base 64 encoded pfx and save the Signing_Certificate
      - name: Decode the pfx
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
          $certificatePath = "GitHubActionsWorkflow.pfx"
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        working-directory: ./G-EIP-700-STG-7-1-eip-lucas.hoch-main/Luxoria.App
      
      # Create the app package by building and packaging the project
      - name: Create the app package
        run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
        env:
          Appx_Bundle: Never
          Appx_Package_Build_Mode: SideloadOnly
          Appx_Package_Dir: Packages\
          Configuration: ${{ matrix.configuration }}
          Platform: ${{ matrix.platform }}
        working-directory: ./G-EIP-700-STG-7-1-eip-lucas.hoch-main/Luxoria.App
      
        # Verify output directory
      - name: List output directory recursively
        run: Get-ChildItem -Recurse ./G-EIP-700-STG-7-1-eip-lucas.hoch-main/Luxoria.App/
        shell: pwsh
      
      - name: Zip the published app
        run: Compress-Archive -Path ./G-EIP-700-STG-7-1-eip-lucas.hoch-main/Luxoria.App/Luxoria.App/Packages -DestinationPath ./G-EIP-700-STG-7-1-eip-lucas.hoch-main/Luxoria.App.${{matrix.platform}}.zip
        shell: pwsh
      
      # Upload the published app
      - name: Upload app
        uses: actions/upload-artifact@v4
        with:
          name: Luxoria.App.${{matrix.platform}}
          path: ./G-EIP-700-STG-7-1-eip-lucas.hoch-main/Luxoria.App.${{matrix.platform}}.zip